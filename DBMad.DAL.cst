<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8"	Src="ToolsCodeTemplate.cs" Inherits="ToolsCodeTemplate"%>
<%@ Property Name="TargetTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="TargetTable that the object is based on." %>
<%@ Property Name="ModelsNamespace" Default="MyOffice.Models" Type="System.String" Category="Context" Description="TargetTable that the object is based on." %>
<%@ Property Name="DALNamespace" Default="MyOffice.DAL" Type="System.String" Category="Context" Description="TargetTable that the object is based on." %>
<%@ Property Name="DALClassNameSurfix" Default="Service" Type="System.String" Category="Context" Description="TargetTable that the object is based on." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<% PrintHeader(); %>
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using MySql.Data.MySqlClient;
using <%= ModelsNamespace %>;

namespace <%= DALNamespace %>
{
	public partial class <%= GetDALClassName() %>
	{
		<%-- public static Book AddBook(Book book) --%>
        #region 根据传入Model，并返回Model
        /// <summary>
        /// 根据传入Model，并返回Model
        /// </summary>        
        public bool Add (<%= GetModelClassName() %> <%= GetModelParamName() %>)
		{
			<%if(IsIdentityPK())
			{%>
				string sql ="<%= GetAutoIncInsertSQLLine()%>";
				MySqlParameter[] para = new MySqlParameter[]
					{
						<%
						for(int i=0; i<TargetTable.NonPrimaryKeyColumns.Count; i++)
						{
							ColumnSchema column = TargetTable.NonPrimaryKeyColumns[i];
							
						%>
						new MySqlParameter("@<%= column.Name %>", ToDBValue(<%= GetModelParamName() %>.<%= column.Name %>)),
						<%
						}
						%>
					};
					
				int AddId = (int)MyDBHelper.ExecuteScalar(sql, para);
				if(AddId==1)
				{
					return true;
				}else
				{
					return false;					
				}
			<%}else
			{%>
				string sql ="<%= GetCommonInsertSQLLine()%>";
				MySqlParameter[] para = new MySqlParameter[]
					{
						<%
						for(int i=0; i<TargetTable.Columns.Count; i++)
						{
							ColumnSchema column = TargetTable.Columns[i];							
						%>
						new MySqlParameter("@<%= column.Name %>", ToDBValue(<%= GetModelParamName() %>.<%= column.Name %>)),
						<%
						}
						%>
					};
				int AddId = (int)MyDBHelper.ExecuteNonQuery(sql, para);
				if(AddId==1)
				{
					return true;
				}else
				{
					return false;					
				}			
			<%}%>
		}
         #endregion

		<%-- public static bool DeleteBookById(int id) --%>
        #region  根据Id删除数据记录
        /// <summary>
        /// 根据Id删除数据记录
        /// </summary>
        public int DeleteBy<%= GetPKPropertyName() %>(<%= GetPKPropertyType() %> <%= GetPKParamName() %>)
		{
            string sql = "DELETE from <%= TargetTable.Name %> WHERE <%= GetPKPropertyName() %> = @<%= GetPKPropertyName() %>";

            MySqlParameter[] para = new MySqlParameter[]
			{
				new MySqlParameter("@<%= GetPKName() %>", <%= GetPKParamName() %>)
			};
		
            return MyDBHelper.ExecuteNonQuery(sql, para);
		}
		 #endregion
		
				

		
		<%-- public static bool ModifyBook(Book book) --%>
        #region 根据传入Model更新数据并返回更新后的Model
        /// <summary>
        /// 根据传入Model更新数据并返回更新后的Model
        /// </summary>
        public int Update(<%= GetModelClassName() %> <%= GetModelParamName() %>)
        {
            string sql =
                "UPDATE <%= TargetTable.Name %> " +
                "SET " +
			" <%= TargetTable.NonPrimaryKeyColumns[0].Name %> = @<%= TargetTable.NonPrimaryKeyColumns[0].Name %>" 
			<%
			for(int i=1; i<TargetTable.NonPrimaryKeyColumns.Count; i++)
			{
				ColumnSchema column = TargetTable.NonPrimaryKeyColumns[i];				
			%>
                +", <%= column.Name %> = @<%= column.Name %>" 
			<%
			}
			%>
               
            +" WHERE <%= GetPKName() %> = @<%= GetPKName() %>";


			MySqlParameter[] para = new MySqlParameter[]
			{
				new MySqlParameter("@<%= GetPKName() %>", <%= GetModelParamName() %>.<%= GetPKName() %>)
				<%
				for(int i=0; i<TargetTable.NonPrimaryKeyColumns.Count; i++)
				{
					ColumnSchema column = TargetTable.NonPrimaryKeyColumns[i];
				%>
					,new MySqlParameter("@<%= column.Name %>", ToDBValue(<%= GetModelParamName() %>.<%= column.Name %>))
				<%
				}
				%>
			};

			return MyDBHelper.ExecuteNonQuery(sql, para);
        }
        #endregion
		
		<%-- public static Book GetBookById(int id) --%>
        #region 传入Id，获得Model实体
        /// <summary>
        /// 传入Id，获得Model实体
        /// </summary>
        public <%= GetModelClassName() %> GetBy<%= GetPKPropertyName() %>(<%= GetPKPropertyType() %> <%= GetPKParamName() %>)
        {
            string sql = "SELECT * FROM <%= TargetTable.Name %> WHERE <%= GetPKPropertyName() %> = @<%= GetPKPropertyName() %>";
            using(MySqlDataReader reader = MyDBHelper.ExecuteDataReader(sql, new MySqlParameter("@<%= GetPKPropertyName() %>", <%= GetPKParamName() %>)))
			{
				if (reader.Read())
				{
					return ToModel(reader);
				}
				else
				{
					return null;
				}
       		}
        }
		#endregion
        
        #region 把DataRow转换成Model
        /// <summary>
        /// 把DataRow转换成Model
        /// </summary>
		public <%= GetModelClassName() %> ToModel(MySqlDataReader dr)
		{
			<%= GetModelClassName() %> <%= GetModelParamName() %> = new <%= GetModelClassName() %>();

			<% foreach(ColumnSchema column in TargetTable.Columns) %>
			<% { %>
			<%= GetModelParamName() %>.<%= GetPropertyName(column) %> = (<%=GetPropertyType(column)%>)ToModelValue(dr,"<%=column.Name%>");
			<% } %>
			return <%= GetModelParamName() %>;
		}
		#endregion
        
        #region  获得总记录数
        ///<summary>
        /// 获得总记录数
        ///</summary>        
		public int GetTotalCount()
		{
			string sql = "SELECT count(*) FROM <%= TargetTable.Name %>";
			return (int)MyDBHelper.ExecuteScalar(sql);
		}
		#endregion
        
        #region 获得分页记录集IEnumerable<>
        ///<summary>
        /// 获得分页记录集IEnumerable<>
        ///</summary>              
		public IEnumerable<<%= GetModelClassName() %>> GetPagedData(int minrownum,int maxrownum)
		{
			string sql = "SELECT * from(SELECT *,(row_number() over(order by <%=this.GetPKName()%>))-1 rownum FROM <%= TargetTable.Name %>) t where rownum>=@minrownum and rownum<=@maxrownum";
			using(MySqlDataReader reader = MyDBHelper.ExecuteDataReader(sql,
				new MySqlParameter("@minrownum",minrownum),
				new MySqlParameter("@maxrownum",maxrownum)))
			{
				return ToModels(reader);					
			}
		}
		#endregion
        
        
        #region 根据字段名获取数据记录IEnumerable<>
        ///<summary>
        ///根据字段名获取数据记录IEnumerable<>
        ///</summary>              
		public IEnumerable<<%= GetModelClassName() %>> GetBycolumnName(string columnName,string columnContent)
		{
			string sql = "SELECT * FROM <%= TargetTable.Name %> where "+columnName+"="+columnContent;
			using(MySqlDataReader reader = MyDBHelper.ExecuteDataReader(sql))
			{
				return ToModels(reader);			
			}
		}
		#endregion
        
        
        
        #region 获得总记录集IEnumerable<>
        ///<summary>
        /// 获得总记录集IEnumerable<>
        ///</summary> 
		public IEnumerable<<%= GetModelClassName() %>> GetAll()
		{
			string sql = "SELECT * FROM <%= TargetTable.Name %>";
			using(MySqlDataReader reader = MyDBHelper.ExecuteDataReader(sql))
			{
				return ToModels(reader);			
			}
		}
        #endregion
		
        #region 把MySqlDataReader转换成IEnumerable<>
        ///<summary>
        /// 把MySqlDataReader转换成IEnumerable<>
        ///</summary> 
		protected IEnumerable<<%= GetModelClassName() %>> ToModels(MySqlDataReader reader)
		{
			var list = new List<<%= GetModelClassName() %>>();
			while(reader.Read())
			{
				list.Add(ToModel(reader));
			}	
			return list;
		}		
		#endregion
        
        #region 判断数据是否为空
        ///<summary>
        /// 判断数据是否为空
        ///</summary>
		protected object ToDBValue(object value)
		{
			if(value==null)
			{
				return DBNull.Value;
			}
			else
			{
				return value;
			}
		}
		#endregion
        
        #region 判断数据表中是否包含该字段
        ///<summary>
        /// 判断数据表中是否包含该字段
        ///</summary>
		protected object ToModelValue(MySqlDataReader reader,string columnName)
		{
			if(reader.IsDBNull(reader.GetOrdinal(columnName)))
			{
				return null;
			}
			else
			{
				return reader[columnName];
			}
		}
        #endregion
	}
}
<script runat="template">
public bool IsIdentityPK()
{
	foreach(ColumnSchema column in TargetTable.Columns)
	{
		if((bool)column.ExtendedProperties["CS_IsIdentity"].Value) 
		{
			return true;
		}
	}
	return false;
}

///////////////////////////////////////////////////////////////
// CLASS NAMES by Shen Bo
///////////////////////////////////////////////////////////////
// UserService
public string GetDALClassName()
{
	return 	GetModelClassName() + DALClassNameSurfix;
}
// User
public string GetModelClassName()
{
	return 	GetModelClassName(TargetTable);
}
// user
public string GetModelMemberVarName()
{
	return GetModelParamName();
}
// user
public string GetModelParamName()
{
	return ConvertToCamel(GetModelClassName());
}


///////////////////////////////////////////////////////////////
// INSERT SQL LINES by Shen Bo
///////////////////////////////////////////////////////////////
public string GetAutoIncInsertSQLLine()
{
	string result;
	result = "INSERT INTO " + TargetTable.Name + " (";
	foreach(ColumnSchema column in TargetTable.NonPrimaryKeyColumns)
	{
		result += column.Name + ", ";
	}
	result = result.Substring(0, result.Length-2);
	result += ") ";
	result += " VALUES (";
	foreach(ColumnSchema column in TargetTable.NonPrimaryKeyColumns)
	{
		result += "@" + column.Name + ", ";
	}
	result = result.Substring(0, result.Length-2);
	result += ")";
	//result += ");select @@IDENTITY";
	return result;
}

public string GetCommonInsertSQLLine()
{
	string result;
	result = "INSERT INTO " + TargetTable.Name + " (";
	foreach(ColumnSchema column in TargetTable.Columns)
	{
		result += column.Name + ", ";
	}
	result = result.Substring(0, result.Length-2);
	result += ") ";
	result += " VALUES (";
	foreach(ColumnSchema column in TargetTable.Columns)
	{
		result += "@" + column.Name + ", ";
	}
	result = result.Substring(0, result.Length-2);
	result += ")";
	return result;
}

///////////////////////////////////////////////////////////////
// PRIMARY KEY TYPE by Shen Bo
///////////////////////////////////////////////////////////////
// int
public string GetPKPropertyType()
{
	return 	GetPKType(TargetTable);
}

///////////////////////////////////////////////////////////////
// PRIMARY KEY NAME by Shen Bo
///////////////////////////////////////////////////////////////
// Id
public string GetPKPropertyName()
{
	return ConvertToPascal(GetPKName());
}
// id
public string GetPKParamName()
{
	return GetPKMemberVarName();	
}
// id
public string GetPKMemberVarName()
{
	return ConvertToCamel(GetPKName());	
}
// Id
public string GetPKName()
{
	return GetPKName(TargetTable);
}

public override string GetFileName()
{
	return this.GetDALClassName() + ".cs";
}

</script>